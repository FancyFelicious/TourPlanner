## Java

#### Interface vs. Abstract Class
Interface - like a contract - a collection of abstract methods and constants, which is used to define a contract
Abstract class - can have constructors, variables, and non-abstract methods
Main difference: Interface only contains method signatures and constants, while an abstract class can contain both abstract and non-abstract methods

#### == vs. equals()
== checks for reference equality
.equals() checks for value equality

#### Collections
= Data Structures (Arrays, LinkedLists, Trees, HashMaps, etc.)
Set: HashSet, TreeSet, LinkedHashSet
List: ArrayList, LinkedList
Queue: PrioriyQueue

#### Input Stream / Output Stream
In Java, an input stream is an abstract representation of an input source, such as a file or network socket, while an output stream is an abstract representation of an output destination, such as a file or network socket.

#### Containers
In Java, a container is an object that stores other objects and provides methods to manipulate them (eg ArrayList)

#### Mocks / Stubs
A mock is a fake object that mimics the behavior of a real object in a controlled way.
Used for isolate and control the behavior of objects that a class under test depends on (eg don't connect to db all the time)
A mock is typically used to test interactions between the class under test and the object being mocked.
Stub: simplified version of a real object that provides predetermined responses to method calls

#### Array vs. List vs. ArrayList
Array is a fixed-size data structure storing elements of one type
List ist is a dynamic data structure that can grow or shrink as needed and can store elements of different data types
ArrayList implements List interface and grants access to more methods

ArrayList is a specific implementation of the List interface in Java that uses an underlying array to store the
elements. It allows for dynamic resizing and provides additional methods for adding, removing, and accessing elements.

In summary, an array is a fixed-size data structure, while a list is a dynamic data structure. ArrayList is an
implementation of the List interface that uses an underlying array to store the elements.

#### Primitives
Boolean is a wrapper class (it can be null for example)
boolean, byte, char, short, int, long, float, and double

#### Objects
Object object = new Object(); - This creates a new object in memory and assigns a reference to that object to the variable object1
Object object; - Declares varibale object without initializing it (it is null)

#### Records
Records are useful for representing data that is not intended to be changed after it has been created, such as data
transfer objects, value objects, or data containers.
They provide a concise syntax for defining such data types, and also help to reduce the amount of boilerplate code
required to create them.

#### Exception: Checked vs. unchecked (Runtime)
Checked at compiling (or before (linter))
Unchecked: runtime (eg array out of boudns)

#### Runnable
In Java, the Runnable interface is used to create a thread by implementing its run() method
A thread is an independent unit of execution within a program, and using Runnable allows you to create a separate thread of execution that can run concurrently with the main thread of the program.

#### Generics & Type Reference
Generics in Java are a feature that allows classes and methods to be parameterized with types. This means that you can create classes and methods that can work with any type, without being tied to a specific type at compile time.

Type references in Java refer to the ability to use a type as a value, which is useful in situations where you want to represent a type itself rather than an instance of that type.

Generics provide type safety and help prevent errors by allowing the compiler to check that the types are compatible at
compile time, rather than at runtime.

https://docs.oracle.com/javase/tutorial/java/generics/inheritance.html

#### Override

When the @Override annotation is used, the Java compiler will check that the method in the subclass is actually
overriding a method in the superclass,
and will produce an error if it is not. This can help catch bugs early on in the development process.

#### Abstract keyword

In Java, methods in an interface are implicitly public abstract. Therefore, there's no need to explicitly declare them
as abstract.
In Java, the constructor is defined with the same name as the class, and it doesn't have a return type, not even void.
The most common constructor is a parameterless constructor that initializes the fields of the object with default
values.


#### "::" vs "."

In Java, the . operator is used to access a class member or method of an object, while the :: operator is used to
reference a method or constructor without invoking it.

Same:
for (String name : names) {System.out.println(name.toUpperCase());}
names.forEach(System.out::println);

Note that the :: operator can be used to reference static methods as well as instance methods, and can also be used to reference constructors.

The . operator is used to access a member or method of an object, such as object.method(). This invokes the method and
returns a value. The . operator is used with an object, and requires an object to be instantiated before it can be used.

The :: operator, on the other hand, is used to create a method reference. It allows you to reference a method without
actually invoking it, and can be used to pass a method as an argument to another method or to create a lambda
expression. For example, ClassName::methodName refers to a method methodName of class ClassName.

In summary, the . operator is used to access a class member or method of an object, while the :: operator is used to
reference a method or constructor without invoking it.

### Jackson / FasterXML

The ParseJson class provides a static method parse that takes a JSON string as input and returns a JsonNode object. The JsonNode class is part of the Jackson JSON library for Java, which is used for working with JSON data in Java.

The objectMapper field is an instance of the ObjectMapper class, which is the main entry point for working with Jackson. It is used to parse JSON data and convert it to Java objects (deserialization) or to convert Java objects to JSON (serialization).

The readTree method is a method of the ObjectMapper class that reads a JSON string and returns a JsonNode object representing the JSON data. The JsonNode object is a generic representation of a JSON object or array that can be used to navigate and manipulate the JSON data in Java.

### Hikari / Connection pool
HikariCP is a high-performance JDBC connection pooling library.

Connection pooling is a technique used to reuse and share database connections instead of creating a new connection
for every database transaction. It allows for faster execution of database queries and reduces the load on the database
server.

A connection pool is a cache of database connections maintained so that the connections can be reused when needed.

In a database-intensive application, establishing a new connection for each database request can be a slow and resource-intensive process.  A connection pool typically establishes a set of initial connections to the database and manages them to ensure that they are available when needed. When a new database request comes in, the connection pool assigns an available connection from the pool to handle the request and returns it back to the pool when the request is completed. This process of reusing connections from a pool is faster and more efficient than establishing a new connection every time a request is made.

### try (Connection)

try (somethin):
So essentially, this line of code is creating a Connection object to a database using the getConnection() method of the
connectorSource object. The try block ensures that the Connection object is automatically closed when the block is
exited (either normally or due to an exception being thrown).

This is a common way to handle database connections in Java, as it helps to prevent resource leaks and ensure that the
connection is properly closed after it is used.

#### Thread / Runnable

The constructor for Thread takes an argument of type Runnable, which is an interface that represents a task that can be
executed. In this case, a new instance of the ClientHandler class is passed as the argument to the Thread constructor.

